// Sheet
exports.sheet = () => {

	return [
		{
			title: "Numeric",
			items: [
				{
					title: "Numeric",
					values: [
						"#%",
						"#+@",
						"#-@",
						"#<=>",
						"#abs",
						"#abs2",
						"#angle",
						"#arg",
						"#ceil",
						"#coerce",
						"#conj",
						"#conjugate",
						"#denominator",
						"#div",
						"#divmod",
						"#eql?",
						"#fdiv",
						"#floor",
						"#i",
						"#imag",
						"#imaginary",
						"#integer?",
						"#magnitude",
						"#modulo",
						"#nonzero?",
						"#numerator",
						"#phase",
						"#polar",
						"#quo",
						"#real",
						"#real?",
						"#rect",
						"#rectangular",
						"#remainder",
						"#round",
						"#singleton_method_added",
						"#step",
						"#to_c",
						"#to_int",
						"#truncate",
						"#zero?"
					]
				}
			]
		},
		{
			title: "RegExp",
			items: [
				{
					title: "RegExp",
					values: [
						"::compile",
						"::escape",
						"::last_match",
						"::new",
						"::quote",
						"::try_convert",
						"::union",
						"#==",
						"#===",
						"#=~",
						"#casefold?",
						"#encoding",
						"#eql?",
						"#fixed_encoding?",
						"#hash",
						"#inspect",
						"#match",
						"#named_captures",
						"#names",
						"#options",
						"#source",
						"#to_s",
						"#~"
					]
				}
			]
		},
		{
			title: "ARGF",
			items: [
				{
					title: "ARGF",
					values: [
						"#argv",
						"#binmode",
						"#binmode?",
						"#bytes",
						"#chars",
						"#close",
						"#closed?",
						"#each",
						"#each_byte",
						"#each_char",
						"#each_line",
						"#eof",
						"#eof?",
						"#external_encoding",
						"#file",
						"#filename",
						"#fileno",
						"#getbyte",
						"#getc",
						"#gets",
						"#inplace_mode",
						"#inplace_mode=",
						"#internal_encoding",
						"#lineno",
						"#lineno=",
						"#lines",
						"#path",
						"#pos",
						"#pos=",
						"#print",
						"#printf",
						"#putc",
						"#puts",
						"#read",
						"#read_nonblock",
						"#readbyte",
						"#readchar",
						"#readline",
						"#readlines",
						"#readpartial",
						"#rewind",
						"#seek",
						"#set_encoding",
						"#skip",
						"#tell",
						"#to_a",
						"#to_i",
						"#to_io",
						"#to_s",
						"#to_write_io",
						"#write"
					]
				}
			]
		},
		{
			title: "Exception",
			items: [
				{
					title: "Exception",
					values: [
						"::exception",
						"::new",
						"#==",
						"#backtrace",
						"#exception",
						"#inspect",
						"#message",
						"#set_backtrace",
						"#to_s"
					]
				}
			]
		},
		{
			title: "Method",
			items: [
				{
					title: "Method",
					values: [
						"#==",
						"#[]",
						"#arity",
						"#call",
						"#clone",
						"#eql?",
						"#hash",
						"#inspect",
						"#name",
						"#owner",
						"#parameters",
						"#receiver",
						"#source_location",
						"#to_proc",
						"#to_s",
						"#unbind"
					]
				}
			]
		},
		{
			title: "Process",
			items: [
				{
					title: "Methods",
					values: [
						"::abort",
						"::daemon",
						"::detach",
						"::egid",
						"::egid=",
						"::euid",
						"::euid=",
						"::exec",
						"::exit",
						"::exit!",
						"::fork",
						"::getpgid",
						"::getpgrp",
						"::getpriority",
						"::getrlimit",
						"::gid",
						"::gid=",
						"::groups",
						"::groups=",
						"::initgroups",
						"::kill",
						"::maxgroups",
						"::maxgroups=",
						"::pid",
						"::ppid",
						"::setpgid",
						"::setpgrp",
						"::setpriority",
						"::setrlimit",
						"::setsid",
						"::spawn",
						"::times",
						"::uid",
						"::uid=",
						"::wait",
						"::wait2",
						"::waitall",
						"::waitpid",
						"::waitpid2"
					]
				},
				{
					title: "Namespace",
					values: [
						"Process::GID",
						"Process::Sys",
						"Process::UID",
						"Process::Status"
					]
				}
			]
		},
		{
			title: "Array",
			items: [
				{
					title: "Array",
					values: [
						"::[]",
						"::new",
						"::try_convert",
						"#&",
						"#*",
						"#+",
						"#-",
						"#<<",
						"#<=>",
						"#==",
						"#[]",
						"#[]=",
						"#assoc",
						"#at",
						"#clear",
						"#collect",
						"#collect!",
						"#combination",
						"#compact",
						"#compact!",
						"#concat",
						"#count",
						"#cycle",
						"#delete",
						"#delete_at",
						"#delete_if",
						"#drop",
						"#drop_while",
						"#each",
						"#each_index",
						"#empty?",
						"#eql?",
						"#fetch",
						"#fill",
						"#find_index",
						"#first",
						"#flatten",
						"#flatten!",
						"#frozen?",
						"#hash",
						"#include?",
						"#index",
						"#initialize_copy",
						"#insert",
						"#inspect",
						"#join",
						"#keep_if",
						"#last",
						"#length",
						"#map",
						"#map!",
						"#pack",
						"#permutation",
						"#pop",
						"#product",
						"#push",
						"#rassoc",
						"#reject",
						"#reject!",
						"#repeated_combination",
						"#repeated_permutation",
						"#replace",
						"#reverse",
						"#reverse!",
						"#reverse_each",
						"#rindex",
						"#rotate",
						"#rotate!",
						"#sample",
						"#select",
						"#select!",
						"#shift",
						"#shuffle",
						"#shuffle!",
						"#size",
						"#slice",
						"#slice!",
						"#sort",
						"#sort!",
						"#sort_by!",
						"#take",
						"#take_while",
						"#to_a",
						"#to_ary",
						"#to_s",
						"#transpose",
						"#uniq",
						"#uniq!",
						"#unshift",
						"#values_at",
						"#zip",
						"#|"
					]
				}
			]
		},
		{
			title: "Bignum",
			items: [
				{
					title: "Bignum",
					values: [
						"#%",
						"#&",
						"#*",
						"#**",
						"#+",
						"#-",
						"#-@",
						"#/",
						"#<",
						"#<<",
						"#<=",
						"#<=>",
						"#==",
						"#===",
						"#>",
						"#>=",
						"#>>",
						"#[]",
						"#^",
						"#abs",
						"#coerce",
						"#div",
						"#divmod",
						"#eql?",
						"#even?",
						"#fdiv",
						"#hash",
						"#magnitude",
						"#modulo",
						"#odd?",
						"#remainder",
						"#size",
						"#to_f",
						"#to_s",
						"#|",
						"#~"
					]
				}
			]
		},
		{
			title: "Enumerator",
			items: [
				{
					title: "Methods",
					values: [
						"::new",
						"#each",
						"#each_with_index",
						"#each_with_object",
						"#feed",
						"#inspect",
						"#next",
						"#next_values",
						"#peek",
						"#peek_values",
						"#rewind",
						"#with_index",
						"#with_object"
					]
				},
				{
					title: "Namespace",
					values: [
						"Enumerator::Generator",
						"Enumerator::Yielder"
					]
				}
			]
		},
		{
			title: "Module",
			items: [
				{
					title: "Module",
					values: [
						"::constants",
						"::nesting",
						"::new",
						"#<",
						"#<=",
						"#<=>",
						"#==",
						"#===",
						"#>",
						"#>=",
						"#alias_method",
						"#ancestors",
						"#append_features",
						"#attr",
						"#attr_accessor",
						"#attr_reader",
						"#attr_writer",
						"#autoload",
						"#autoload?",
						"#class_eval",
						"#class_exec",
						"#class_variable_defined?",
						"#class_variable_get",
						"#class_variable_set",
						"#class_variables",
						"#const_defined?",
						"#const_get",
						"#const_missing",
						"#const_set",
						"#constants",
						"#define_method",
						"#extend_object",
						"#extended",
						"#freeze",
						"#include",
						"#include?",
						"#included",
						"#included_modules",
						"#instance_method",
						"#instance_methods",
						"#method_added",
						"#method_defined?",
						"#method_removed",
						"#method_undefined",
						"#module_eval",
						"#module_exec",
						"#module_function",
						"#name",
						"#private",
						"#private_class_method",
						"#private_instance_methods",
						"#private_method_defined?",
						"#protected",
						"#protected_instance_methods",
						"#protected_method_defined?",
						"#public",
						"#public_class_method",
						"#public_instance_method",
						"#public_instance_methods",
						"#public_method_defined?",
						"#remove_class_variable",
						"#remove_const",
						"#remove_method",
						"#to_s",
						"#undef_method"
					]
				}
			]
		},
		{
			title: "File",
			items: [
				{
					title: "File",
					values: [
						"::absolute_path",
						"::atime",
						"::basename",
						"::blockdev?",
						"::chardev?",
						"::chmod",
						"::chown",
						"::ctime",
						"::delete",
						"::directory?",
						"::dirname",
						"::executable?",
						"::executable_real?",
						"::exist?",
						"::exists?",
						"::expand_path",
						"::extname",
						"::file?",
						"::fnmatch",
						"::fnmatch?",
						"::ftype",
						"::grpowned?",
						"::identical?",
						"::join",
						"::lchmod",
						"::lchown",
						"::link",
						"::lstat",
						"::mtime",
						"::new",
						"::open",
						"::owned?",
						"::path",
						"::pipe?",
						"::readable?",
						"::readable_real?",
						"::readlink",
						"::realdirpath",
						"::realpath",
						"::rename",
						"::setgid?",
						"::setuid?",
						"::size",
						"::size?",
						"::socket?",
						"::split",
						"::stat",
						"::sticky?",
						"::symlink",
						"::symlink?",
						"::truncate",
						"::umask",
						"::unlink",
						"::utime",
						"::world_readable?",
						"::world_writable?",
						"::writable?",
						"::writable_real?",
						"::zero?",
						"#atime",
						"#chmod",
						"#chown",
						"#ctime",
						"#flock",
						"#lstat",
						"#mtime",
						"#path",
						"#size",
						"#to_path",
						"#truncate"
					]
				}
			]
		},
		{
			title: "IO",
			items: [
				{
					title: "Methods",
					values: [
						"::binread",
						"::binwrite",
						"::copy_stream",
						"::for_fd",
						"::foreach",
						"::new",
						"::open",
						"::pipe",
						"::popen",
						"::read",
						"::readlines",
						"::select",
						"::sysopen",
						"::try_convert",
						"::write",
						"#<<",
						"#advise",
						"#autoclose=",
						"#autoclose?",
						"#binmode",
						"#binmode?",
						"#bytes",
						"#chars",
						"#close",
						"#close_on_exec=",
						"#close_on_exec?",
						"#close_read",
						"#close_write",
						"#closed?",
						"#codepoints",
						"#each",
						"#each_byte",
						"#each_char",
						"#each_codepoint",
						"#each_line",
						"#eof",
						"#eof?",
						"#external_encoding",
						"#fcntl",
						"#fdatasync",
						"#fileno",
						"#flush",
						"#fsync",
						"#getbyte",
						"#getc",
						"#gets",
						"#inspect",
						"#internal_encoding",
						"#ioctl",
						"#isatty",
						"#lineno",
						"#lineno=",
						"#lines",
						"#pid",
						"#pos",
						"#pos=",
						"#print",
						"#printf",
						"#putc",
						"#puts",
						"#read",
						"#read_nonblock",
						"#readbyte",
						"#readchar",
						"#readline",
						"#readlines",
						"#readpartial",
						"#reopen",
						"#rewind",
						"#seek",
						"#set_encoding",
						"#stat",
						"#sync",
						"#sync=",
						"#sysread",
						"#sysseek",
						"#syswrite",
						"#tell",
						"#to_i",
						"#to_io",
						"#tty?",
						"#ungetbyte",
						"#ungetc",
						"#write",
						"#write_nonblock"
					]
				},
				{
					title: "Namespace",
					values: [
						"IO::WaitReadable",
						"IO::WaitWritable"
					]
				}
			]
		},
		{
			title: "Proc",
			items: [
				{
					title: "Proc",
					values: [
						"::new",
						"#==",
						"#===",
						"#[]",
						"#arity",
						"#binding",
						"#call",
						"#curry",
						"#eql?",
						"#hash",
						"#lambda?",
						"#parameters",
						"#source_location",
						"#to_proc",
						"#to_s",
						"#yield"
					]
				}
			]
		},
		{
			title: "Random",
			items: [
				{
					title: "Random",
					values: [
						"::new",
						"::new_seed",
						"::rand",
						"::srand",
						"#==",
						"#bytes",
						"#rand",
						"#seed"
					]
				}
			]
		},
		{
			title: "Symbol",
			items: [
				{
					title: "Symbol",
					values: [
						"::all_symbols",
						"#<=>",
						"#==",
						"#===",
						"#=~",
						"#[]",
						"#capitalize",
						"#casecmp",
						"#downcase",
						"#empty?",
						"#encoding",
						"#id2name",
						"#inspect",
						"#intern",
						"#length",
						"#match",
						"#next",
						"#size",
						"#slice",
						"#succ",
						"#swapcase",
						"#to_proc",
						"#to_s",
						"#to_sym",
						"#upcase"
					]
				}
			]
		},
		{
			title: "String",
			items: [
				{
					title: "String",
					values: [
						"::new",
						"::try_convert",
						"#%",
						"#*",
						"#+",
						"#<<",
						"#<=>",
						"#==",
						"#===",
						"#=~",
						"#[]",
						"#[]=",
						"#ascii_only?",
						"#bytes",
						"#bytesize",
						"#byteslice",
						"#capitalize",
						"#capitalize!",
						"#casecmp",
						"#center",
						"#chars",
						"#chomp",
						"#chomp!",
						"#chop",
						"#chop!",
						"#chr",
						"#clear",
						"#codepoints",
						"#concat",
						"#count",
						"#crypt",
						"#delete",
						"#delete!",
						"#downcase",
						"#downcase!",
						"#dump",
						"#each_byte",
						"#each_char",
						"#each_codepoint",
						"#each_line",
						"#empty?",
						"#encode",
						"#encode!",
						"#encoding",
						"#end_with?",
						"#eql?",
						"#force_encoding",
						"#getbyte",
						"#gsub",
						"#gsub!",
						"#hash",
						"#hex",
						"#include?",
						"#index",
						"#initialize_copy",
						"#insert",
						"#inspect",
						"#intern",
						"#length",
						"#lines",
						"#ljust",
						"#lstrip",
						"#lstrip!",
						"#match",
						"#next",
						"#next!",
						"#oct",
						"#ord",
						"#partition",
						"#prepend",
						"#replace",
						"#reverse",
						"#reverse!",
						"#rindex",
						"#rjust",
						"#rpartition",
						"#rstrip",
						"#rstrip!",
						"#scan",
						"#setbyte",
						"#size",
						"#slice",
						"#slice!",
						"#split",
						"#squeeze",
						"#squeeze!",
						"#start_with?",
						"#strip",
						"#strip!",
						"#sub",
						"#sub!",
						"#succ",
						"#succ!",
						"#sum",
						"#swapcase",
						"#swapcase!",
						"#to_c",
						"#to_f",
						"#to_i",
						"#to_r",
						"#to_s",
						"#to_str",
						"#to_sym",
						"#tr",
						"#tr!",
						"#tr_s",
						"#tr_s!",
						"#unpack",
						"#upcase",
						"#upcase!",
						"#upto",
						"#valid_encoding?"
					]
				}
			]
		},
		{
			title: "Complex",
			items: [
				{
					title: "Complex",
					values: [
						"::polar",
						"::rect",
						"::rectangular",
						"#*",
						"#**",
						"#+",
						"#-",
						"#-@",
						"#/",
						"#==",
						"#abs",
						"#abs2",
						"#angle",
						"#arg",
						"#conj",
						"#conjugate",
						"#denominator",
						"#fdiv",
						"#imag",
						"#imaginary",
						"#inspect",
						"#magnitude",
						"#numerator",
						"#phase",
						"#polar",
						"#quo",
						"#rationalize",
						"#real",
						"#real?",
						"#rect",
						"#rectangular",
						"#to_f",
						"#to_i",
						"#to_r",
						"#to_s",
						"#~"
					]
				}
			]
		},
		{
			title: "Fixnum",
			items: [
				{
					title: "Fixnum",
					values: [
						"#%",
						"#&",
						"#*",
						"#**",
						"#+",
						"#-",
						"#-@",
						"#/",
						"#<",
						"#<<",
						"#<=",
						"#<=>",
						"#==",
						"#===",
						"#>",
						"#>=",
						"#>>",
						"#[]",
						"#^",
						"#abs",
						"#div",
						"#divmod",
						"#even?",
						"#fdiv",
						"#magnitude",
						"#modulo",
						"#odd?",
						"#size",
						"#succ",
						"#to_f",
						"#to_s",
						"#zero?",
						"#|",
						"#~"
					]
				}
			]
		},
		{
			title: "Range",
			items: [
				{
					title: "Range",
					values: [
						"::new",
						"#==",
						"#===",
						"#begin",
						"#cover?",
						"#each",
						"#end",
						"#eql?",
						"#exclude_end?",
						"#first",
						"#hash",
						"#include?",
						"#inspect",
						"#last",
						"#max",
						"#member?",
						"#min",
						"#step",
						"#to_s"
					]
				}
			]
		},
		{
			title: "Thread",
			items: [
				{
					title: "Thread",
					values: [
						"::DEBUG",
						"::DEBUG=",
						"::abort_on_exception",
						"::abort_on_exception=",
						"::current",
						"::exclusive",
						"::exit",
						"::fork",
						"::kill",
						"::list",
						"::main",
						"::pass",
						"::start",
						"::stop",
						"#[]",
						"#[]=",
						"#abort_on_exception",
						"#abort_on_exception=",
						"#add_trace_func",
						"#alive?",
						"#backtrace",
						"#exit",
						"#group",
						"#inspect",
						"#join",
						"#key?",
						"#keys",
						"#kill",
						"#priority",
						"#priority=",
						"#raise",
						"#run",
						"#safe_level",
						"#set_trace_func",
						"#status",
						"#stop?",
						"#terminate",
						"#value",
						"#wakeup"
					]
				}
			]
		},
		{
			title: "Math",
			items: [
				{
					title: "Math",
					values: [
						"::acos",
						"::acosh",
						"::asin",
						"::asinh",
						"::atan",
						"::atan2",
						"::atanh",
						"::cbrt",
						"::cos",
						"::cosh",
						"::erf",
						"::erfc",
						"::exp",
						"::frexp",
						"::gamma",
						"::hypot",
						"::ldexp",
						"::lgamma",
						"::log",
						"::log10",
						"::log2",
						"::sin",
						"::sinh",
						"::sqrt",
						"::tan",
						"::tanh"
					]
				}
			]
		},
		{
			title: "Hash",
			items: [
				{
					title: "Hash",
					values: [
						"::[]",
						"::new",
						"::try_convert",
						"#==",
						"#[]",
						"#[]=",
						"#assoc",
						"#clear",
						"#compare_by_identity",
						"#compare_by_identity?",
						"#default",
						"#default=",
						"#default_proc",
						"#default_proc=",
						"#delete",
						"#delete_if",
						"#each",
						"#each_key",
						"#each_pair",
						"#each_value",
						"#empty?",
						"#eql?",
						"#fetch",
						"#flatten",
						"#has_key?",
						"#has_value?",
						"#hash",
						"#include?",
						"#initialize_copy",
						"#inspect",
						"#invert",
						"#keep_if",
						"#key",
						"#key?",
						"#keys",
						"#length",
						"#member?",
						"#merge",
						"#merge!",
						"#rassoc",
						"#rehash",
						"#reject",
						"#reject!",
						"#replace",
						"#select",
						"#select!",
						"#shift",
						"#size",
						"#store",
						"#to_a",
						"#to_hash",
						"#to_s",
						"#update",
						"#value?",
						"#values",
						"#values_at"
					]
				}
			]
		},
		{
			title: "BasicObject",
			items: [
				{
					title: "BasicObject",
					values: [
						"::new",
						"#!",
						"#!=",
						"#==",
						"#__id__",
						"#__send__",
						"#equal?",
						"#instance_eval",
						"#instance_exec",
						"#method_missing",
						"#singleton_method_added",
						"#singleton_method_removed",
						"#singleton_method_undefined"
					]
				}
			]
		},
		{
			title: "Class",
			items: [
				{
					title: "Class",
					values: [
						"::new",
						"#allocate",
						"#inherited",
						"#new",
						"#superclass"
					]
				}
			]
		},
		{
			title: "Encoding",
			items: [
				{
					title: "Methods",
					values: [
						"::aliases",
						"::compatible?",
						"::default_external",
						"::default_external=",
						"::default_internal",
						"::default_internal=",
						"::find",
						"::list",
						"::locale_charmap",
						"::name_list",
						"#ascii_compatible?",
						"#dummy?",
						"#inspect",
						"#name",
						"#names",
						"#replicate",
						"#to_s"
					]
				},
				{
					title: "Namespace",
					values: [
						"Encoding::CompatibilityError",
						"Encoding::Converter",
						"Encoding::ConverterNotFoundError",
						"Encoding::InvalidByteSequenceError",
						"Encoding::UndefinedConversionError"
					]
				}
			]
		},
		{
			title: "Float",
			items: [
				{
					title: "Float",
					values: [
						"#%",
						"#*",
						"#**",
						"#+",
						"#-",
						"#-@",
						"#/",
						"#<",
						"#<=",
						"#<=>",
						"#==",
						"#===",
						"#>",
						"#>=",
						"#abs",
						"#angle",
						"#arg",
						"#ceil",
						"#coerce",
						"#denominator",
						"#divmod",
						"#eql?",
						"#fdiv",
						"#finite?",
						"#floor",
						"#hash",
						"#infinite?",
						"#magnitude",
						"#modulo",
						"#nan?",
						"#numerator",
						"#phase",
						"#quo",
						"#rationalize",
						"#round",
						"#to_f",
						"#to_i",
						"#to_int",
						"#to_r",
						"#to_s",
						"#truncate",
						"#zero?"
					]
				}
			]
		},
		{
			title: "Rational",
			items: [
				{
					title: "Rational",
					values: [
						"#*",
						"#**",
						"#+",
						"#-",
						"#/",
						"#<=>",
						"#==",
						"#ceil",
						"#denominator",
						"#fdiv",
						"#floor",
						"#inspect",
						"#numerator",
						"#quo",
						"#rationalize",
						"#round",
						"#to_f",
						"#to_i",
						"#to_r",
						"#to_s",
						"#truncate"
					]
				}
			]
		},
		{
			title: "Integer",
			items: [
				{
					title: "Integer",
					values: [
						"#ceil",
						"#chr",
						"#denominator",
						"#downto",
						"#even?",
						"#floor",
						"#gcd",
						"#gcdlcm",
						"#integer?",
						"#lcm",
						"#next",
						"#numerator",
						"#odd?",
						"#ord",
						"#pred",
						"#rationalize",
						"#round",
						"#succ",
						"#times",
						"#to_i",
						"#to_int",
						"#to_r",
						"#truncate",
						"#upto"
					]
				}
			]
		},
		{
			title: "Object",
			items: [
				{
					title: "Object",
					values: [
						"#!~",
						"#<=>",
						"#===",
						"#=~",
						"#class",
						"#clone",
						"#define_singleton_method",
						"#display",
						"#dup",
						"#enum_for",
						"#eql?",
						"#extend",
						"#freeze",
						"#frozen?",
						"#hash",
						"#inspect",
						"#instance_of?",
						"#instance_variable_defined?",
						"#instance_variable_get",
						"#instance_variable_set",
						"#instance_variables",
						"#is_a?",
						"#kind_of?",
						"#method",
						"#nil?",
						"#object_id",
						"#public_method",
						"#public_send",
						"#remove_instance_variable",
						"#respond_to?",
						"#respond_to_missing?",
						"#send",
						"#singleton_class",
						"#singleton_methods",
						"#taint",
						"#tainted?",
						"#tap",
						"#to_enum",
						"#to_s",
						"#trust",
						"#untaint",
						"#untrust",
						"#untrusted?"
					]
				}
			]
		},
		{
			title: "Time",
			items: [
				{
					title: "Time",
					values: [
						"::_load",
						"::at",
						"::gm",
						"::local",
						"::mktime",
						"::new",
						"::now",
						"::utc",
						"#+",
						"#-",
						"#<=>",
						"#_dump",
						"#asctime",
						"#ctime",
						"#day",
						"#dst?",
						"#eql?",
						"#friday?",
						"#getgm",
						"#getlocal",
						"#getutc",
						"#gmt?",
						"#gmt_offset",
						"#gmtime",
						"#gmtoff",
						"#hash",
						"#hour",
						"#inspect",
						"#isdst",
						"#localtime",
						"#marshal_dump",
						"#marshal_load",
						"#mday",
						"#min",
						"#mon",
						"#monday?",
						"#month",
						"#nsec",
						"#round",
						"#saturday?",
						"#sec",
						"#strftime",
						"#subsec",
						"#succ",
						"#sunday?",
						"#thursday?",
						"#to_a",
						"#to_f",
						"#to_i",
						"#to_r",
						"#to_s",
						"#tuesday?",
						"#tv_nsec",
						"#tv_sec",
						"#tv_usec",
						"#usec",
						"#utc",
						"#utc?",
						"#utc_offset",
						"#wday",
						"#wednesday?",
						"#yday",
						"#year",
						"#zone"
					]
				}
			]
		},
		{
			title: "Fiber",
			items: [
				{
					title: "Fiber",
					values: [
						"::current",
						"::yield",
						"#alive?",
						"#resume",
						"#transfer"
					]
				}
			]
		},
		{
			title: "Kernal",
			items: [
				{
					title: "Kernal",
					values: [
						"#Array",
						"#Complex",
						"#Float",
						"#Integer",
						"#Rational",
						"#String",
						"#__callee__",
						"#__method__",
						"#`",
						"#abort",
						"#at_exit",
						"#autoload",
						"#autoload?",
						"#binding",
						"#block_given?",
						"#callcc",
						"#caller",
						"#catch",
						"#chomp",
						"#chop",
						"#eval",
						"#exec",
						"#exit",
						"#exit!",
						"#fail",
						"#fork",
						"#format",
						"#gets",
						"#global_variables",
						"#gsub",
						"#iterator?",
						"#lambda",
						"#load",
						"#local_variables",
						"#loop",
						"#open",
						"#p",
						"#print",
						"#printf",
						"#proc",
						"#putc",
						"#puts",
						"#raise",
						"#rand",
						"#readline",
						"#readlines",
						"#require",
						"#require_relative",
						"#select",
						"#set_trace_func",
						"#sleep",
						"#spawn",
						"#sprintf",
						"#srand",
						"#sub",
						"#syscall",
						"#system",
						"#test",
						"#throw",
						"#trace_var",
						"#trap",
						"#untrace_var",
						"#warn"
					]
				}
			]
		},
		{
			title: "PreDefined",
			items: [
				{
					title: "Variables",
					values: [
						"$! - The exception information message set by ‘raise’.",
						"$@ - Array of backtrace of the last exception thrown.",
						"$& - The string matched by the last successful pattern match in this scope.",
						"$` - The string to the left of the last successful match.",
						"$' - The string to the right of the last successful match.",
						"$+ - The last bracket matched by the last successful match.",
						"$1 - The Nth group of the last successful match. May be > 1.",
						"$~ - The information about the last match in the current scope.",
						"$= - The flag for case insensitive, nil by default.",
						"$/ - The input record separator, newline by default.",
						"$\\ - The output record separator for the print and IO#write. Default is nil.",
						"$, - The output field separator for the print and Array#join.",
						"$; - The default separator for String#split.",
						"$. - The current input line number of the last file that was read.",
						"$< - The virtual concatenation file of the files given on command line.",
						"$> - The default output for print, printf. $stdout by default.",
						"$_ - The last input line of string by gets or readline.",
						"$0 - Contains the name of the script being executed. May be assignable.",
						"$* - Command line arguments given for the script sans args.",
						"$$ - The process number of the Ruby running this script.",
						"$? - The status of the last executed child process.",
						"$: - Load path for scripts and binary modules by load or require.",
						'$" - The array contains the module names loaded by require.',
						"$DEBUG - The status of the -d switch.",
						"$FILENAME - Current input file from $<. Same as $<.filename.",
						"$LOAD_PATH - The alias to the $:.",
						"$stderr - The current standard error output.",
						"$stdin - The current standard input.",
						"$stdout - The current standard output.",
						"$VERBOSE - The verbose flag, which is set by the -v switch.",
						"$-0 - The alias to $/",
						"$-a - True if option -a is set. Read-only variable.",
						"$-d - The alias to $DEBUG.",
						"$-F - The alias to $;.",
						"$-i - In in-place-edit mode, this variable holds the extention, otherwise nil.",
						"$-I - The alias to $:.",
						"$-l - True if option -l is set. Read-only variable.",
						"$-p - True if option -p is set. Read-only variable.",
						"$-v - The alias to $VERBOSE.",
					]
				},
				{
					title: "Global Constants",
					values: [
						"TRUE - The typical true value.",
						"FALSE - The false itself.",
						"NIL - The nil itself.",
						"STDIN - The standard input. The default value for $stdin.",
						"STDOUT - The standard output. The default value for $stdout.",
						"STDERR - The standard error output. The default value for $stderr.",
						"ENV - The hash contains current environment variables.",
						"ARGF - The alias to the $<.",
						"ARGV - The alias to the $*.",
						"DATA - The file object of the script, pointing just after __END__.",
						"RUBY_VERSION - The ruby version string (VERSION was depricated).",
						"RUBY_RELEASE_DATE - The relase date string.",
						"RUBY_PLATFORM - The platform identifier"
					]
				}
			]
		}
	];
};
